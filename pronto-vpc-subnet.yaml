AWSTemplateFormatVersion: 2010-09-09
Description: Subnet Creation for Pronto VPC
Parameters:
  StackParameter:
    Type: String
    Default: Please enter the correct stack name

Resources:
  InternetGateway1:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::Region'
              - Internet Gateway1
  InternetGateway2:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::Region'
              - Internet Gateway2
  AttachGateway1:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !ImportValue
        'Fn::Sub': '${StackParameter}-VPC1'
      InternetGatewayId: !Ref InternetGateway1

  AttachGateway2:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !ImportValue
        'Fn::Sub': '${StackParameter}-VPC2'
      InternetGatewayId: !Ref InternetGateway2

  # Public subnets for 2 VPC's, one for each
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !ImportValue
        'Fn::Sub': '${StackParameter}-VPC1'
      CidrBlock: 10.48.160.0/28
      AvailabilityZone: !Join
        - ''
        - - !Ref 'AWS::Region'
          - b
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public-1
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !ImportValue
        'Fn::Sub': '${StackParameter}-VPC2'
      CidrBlock: 10.48.160.64/28
      AvailabilityZone: !Join
        - ''
        - - !Ref 'AWS::Region'
          - b
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public-2

  # Private subnets for 2 VPC's, 3 for each
  PrivateSubnet1VPC1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !ImportValue
        'Fn::Sub': '${StackParameter}-VPC1'
      CidrBlock: 10.48.160.16/28
      AvailabilityZone: !Join
        - ''
        - - !Ref 'AWS::Region'
          - b
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC-1-Private-1
  PrivateSubnet2VPC1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !ImportValue
        'Fn::Sub': '${StackParameter}-VPC1'
      CidrBlock: 10.48.160.32/28
      AvailabilityZone: !Join
        - ''
        - - !Ref 'AWS::Region'
          - b
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC-1-Private-2
  PrivateSubnet3VPC1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !ImportValue
        'Fn::Sub': '${StackParameter}-VPC1'
      CidrBlock: 10.48.160.48/28
      AvailabilityZone: !Join
        - ''
        - - !Ref 'AWS::Region'
          - b
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC-1-Private-3
  PrivateSubnet1VPC2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !ImportValue
        'Fn::Sub': '${StackParameter}-VPC2'
      CidrBlock: 10.48.160.80/28
      AvailabilityZone: !Join
        - ''
        - - !Ref 'AWS::Region'
          - b
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC-2-Private-1
  PrivateSubnet2VPC2:
      Type: 'AWS::EC2::Subnet'
      Properties:
        VpcId: !ImportValue
          'Fn::Sub': '${StackParameter}-VPC2'
        CidrBlock: 10.48.160.96/28
        AvailabilityZone: !Join
          - ''
          - - !Ref 'AWS::Region'
            - b
        Tags:
          - Key: Name
            Value: !Sub ${AWS::StackName}-VPC-2-Private-2
  PrivateSubnet3VPC2:
      Type: 'AWS::EC2::Subnet'
      Properties:
        VpcId: !ImportValue
          'Fn::Sub': '${StackParameter}-VPC2'
        CidrBlock: 10.48.160.112/28
        AvailabilityZone: !Join
          - ''
          - - !Ref 'AWS::Region'
            - b
        Tags:
          - Key: Name
            Value: !Sub ${AWS::StackName}-VPC-2-Private-3
# Some route tables for our subnets:
  PublicRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !ImportValue
        'Fn::Sub': '${StackParameter}-VPC1'
      Tags:
      - Key: Name
        Value: Public

  PublicRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !ImportValue
        'Fn::Sub': '${StackParameter}-VPC2'
      Tags:
        - Key: Name
          Value: Public

  PublicRoute1:   # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway1
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway1

  PublicRoute2:   # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway2
    Properties:
      RouteTableId: !Ref PublicRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway2
  # Here is a private route table:
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !ImportValue
        'Fn::Sub': '${StackParameter}-VPC1'
      Tags:
      - Key: Name
        Value: Private

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !ImportValue
        'Fn::Sub': '${StackParameter}-VPC2'
      Tags:
        - Key: Name
          Value: Private

  PrivateRoute1:            # Private route table can access web via NAT (created below)
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1

  PrivateRoute2:            # Private route table can access web via NAT (created below)
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway2

# A NAT Gateway:
  NATGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPAddress1.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub NAT-${AWS::StackName}
  NATGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPAddress2.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub NAT-${AWS::StackName}
  ElasticIPAddress1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC
  ElasticIPAddress2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC
# Attach the public subnets to public route tables,
# and attach the private subnets to private route tables:
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable1
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable2
  PrivateSubnet1VPC1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1VPC1
      RouteTableId: !Ref PrivateRouteTable1
  PrivateSubnet2VPC1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2VPC1
      RouteTableId: !Ref PrivateRouteTable1
  PrivateSubnet3VPC1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3VPC1
      RouteTableId: !Ref PrivateRouteTable1
  PrivateSubnet1VPC2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1VPC2
      RouteTableId: !Ref PrivateRouteTable2
  PrivateSubnet2VPC2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2VPC2
      RouteTableId: !Ref PrivateRouteTable2
  PrivateSubnet3VPC2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3VPC2
      RouteTableId: !Ref PrivateRouteTable2

Outputs:
  InternetGateway1:
    Description: Internet Gateway (IGW) Id
    Value: !Ref InternetGateway1
    Export:
      Name: !Sub '${AWS::StackName}-IGW1'
  InternetGateway2:
    Description: Internet Gateway (IGW) Id
    Value: !Ref InternetGateway2
    Export:
      Name: !Sub '${AWS::StackName}-IGW2'
  AttachGateway1:
    Description: Attach Gateway (AGW) Id
    Value: !Ref AttachGateway1
    Export:
      Name: !Sub '${AWS::StackName}-AGW1'
  AttachGateway2:
    Description: Attach Gateway (AGW) Id
    Value: !Ref AttachGateway2
    Export:
      Name: !Sub '${AWS::StackName}-AGW2'
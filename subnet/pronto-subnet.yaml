AWSTemplateFormatVersion: 2010-09-09
Description: Subnet Creation for POS Pronto VPC
Parameters:
  StackParameter:
    Type: String
    Default: Please enter the VPC stack name
  TransitGateway:
    Type: String
    Default: tgw-040d56f49d5145f30

Resources:
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::Region'
              - Internet Gateway

  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !ImportValue
        'Fn::Sub': '${StackParameter}'
      InternetGatewayId: !Ref InternetGateway
      

  # 2 Public subnets for VPC
  PublicSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !ImportValue
        'Fn::Sub': '${StackParameter}'
      CidrBlock: 10.48.160.0/28
      AvailabilityZone: !Join
        - ''
        - - !Ref 'AWS::Region'
          - a
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnetA

  PublicSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !ImportValue
        'Fn::Sub': '${StackParameter}'
      CidrBlock: 10.48.160.16/28
      AvailabilityZone: !Join
        - ''
        - - !Ref 'AWS::Region'
          - b
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnetB

  # 3 Private subnets for VPC
  PrivateSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !ImportValue
        'Fn::Sub': '${StackParameter}'
      CidrBlock: 10.48.160.32/27
      AvailabilityZone: !Join
        - ''
        - - !Ref 'AWS::Region'
          - a
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnetA
  PrivateSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !ImportValue
        'Fn::Sub': '${StackParameter}'
      CidrBlock: 10.48.160.64/27
      AvailabilityZone: !Join
        - ''
        - - !Ref 'AWS::Region'
          - b
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnetB
  PrivateSubnetC:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !ImportValue
        'Fn::Sub': '${StackParameter}'
      CidrBlock: 10.48.160.96/27
      AvailabilityZone: !Join
        - ''
        - - !Ref 'AWS::Region'
          - c
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnetC

# Some route tables for our subnets:
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !ImportValue
        'Fn::Sub': '${StackParameter}'
      Tags:
      - Key: Name
        Value: PublicRouteTable

  PublicRoute:   # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Here is a private route table:
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !ImportValue
        'Fn::Sub': '${StackParameter}'
      Tags:
      - Key: Name
        Value: PrivateRouteTable

  PrivateRoute:            # Private route table can access web via NAT (created below)
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PrivateRouteTGW:            # Private route to reference transitgateway
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 10.0.0.0/8
      TransitGatewayId: !Ref TransitGateway

# A NAT Gateway:
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: Name
          Value: !Sub NAT-${AWS::StackName}

  ElasticIPAddress:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC

# Attach the public subnets to public route tables,
# and attach the private subnets to private route tables:
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetC
      RouteTableId: !Ref PrivateRouteTable


Outputs:
  InternetGateway:
    Description: Internet Gateway (IGW) Id
    Value: !Ref InternetGateway
    Export:
      Name: !Sub '${AWS::StackName}-IGW1'

  AttachGateway:
    Description: Attach Gateway (AGW) Id
    Value: !Ref AttachGateway
    Export:
      Name: !Sub '${AWS::StackName}-AGW1'

  PublicSubnetA:
    Description: Subnet Id
    Value: !Ref PublicSubnetA
    Export:
      Name: !Sub '${AWS::StackName}-PublicA'

  PublicSubnetB:
    Description: Subnet Id
    Value: !Ref PublicSubnetA
    Export:
      Name: !Sub '${AWS::StackName}-PublicB'

  PrivateSubnetA:
    Description: Subnet Id
    Value: !Ref PrivateSubnetA
    Export:
      Name: !Sub '${AWS::StackName}-PrivateA'
  PrivateSubnetB:
    Description: Subnet Id
    Value: !Ref PrivateSubnetB
    Export:
      Name: !Sub '${AWS::StackName}-PrivateB'
  PrivateSubnetC:
    Description: Subnet Id
    Value: !Ref PrivateSubnetC
    Export:
      Name: !Sub '${AWS::StackName}-PrivateC'
      
  PrivateRouteTGW:
    Description: Transit Gateway Route
    Value: !Ref PrivateRouteTGW
    Export:
      Name: !Sub '${AWS::StackName}-RTGW'
